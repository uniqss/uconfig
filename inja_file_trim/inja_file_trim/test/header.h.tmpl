#pragma once

#include<vector>
#include<map>
#include "uniqsconfigtypes.h"

class {{SheetName}}
{
public:
	{{SheetName}}()
	{
		id = 0;
		type = 0;
		name = "";
		desc = "";
	}
	// 字段类型 字段名
	uint32 id;
	uint32 type;
	string name;
	string desc;
};

class {{SheetName}}_Data
{
public:
	std::vector< {{SheetName}}> Datas;
	std::map<uint32, {{SheetName}}*> MapItems1;
	std::map<std::tuple<uint32, string>, {{SheetName}}*> MapItems2;
public:
	const {{SheetName}}* FindByKey1(const uint32& Id) const
	{
		auto it = MapItems1.find(Id);
		if (it != MapItems1.end())
		{
			return it->second;
		}
		return nullptr;
	}
	const {{SheetName}}* FindByKey2(const uint32& Type, const string& Name) const
	{
		auto it = MapItems2.find(make_tuple(Type, Name));
		if (it != MapItems2.end())
		{
			return it->second;
		}
		return nullptr;
	}
};
extern {{SheetName}}_Data __g_{{SheetName}}_Data;
const {{SheetName}}_Data& Get{{SheetName}}();
// 加载函数
void {{SheetName}}_LoadData(const std::string& pszDataFilePath);
void {{SheetName}}_SetColumn({{SheetName}}& rCfg, const std::string& name, const std::string& col);
