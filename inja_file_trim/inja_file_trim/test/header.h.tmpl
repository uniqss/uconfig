#pragma once

#include<vector>
#include<map>
#include "uniqsconfigtypes.h"

class {{SheetName}}
{
public:
	{{SheetName}}()
	{
{% for i in range(length(CodeName)) %}
		{{ at(CodeName, i) }} = 0;{% endfor %}
	}
	{% for i in range(length(CodeName)) %}
	{{ at(Type, i) }} {{ at(CodeName, i) }};// {{ at(Description, i) }}{% endfor %}
};

class {{SheetName}}_Data
{
public:
	std::vector< {{SheetName}}> Datas;
{% for key, value in PrimaryKeyTypes) %}
	{% if length(value) == 1 %}std::map<{{ at(value, 0) }}, {{SheetName}}*> MapItems{{ key }};{% else %}std::map<std::tuple<{% for idx in range(length(value) - 1) %}{{at(value, idx)}}, {% endfor %}{{last(value)}}>, {{SheetName}}*> MapItems{{ key }};{% endif %}{% endfor %}
public:
	const {{SheetName}}* FindByKey1(const uint32& Id) const
	{
		auto it = MapItems1.find(Id);
		if (it != MapItems1.end())
		{
			return it->second;
		}
		return nullptr;
	}
	const {{SheetName}}* FindByKey2(const uint32& Type, const string& Name) const
	{
		auto it = MapItems2.find(make_tuple(Type, Name));
		if (it != MapItems2.end())
		{
			return it->second;
		}
		return nullptr;
	}
};
extern {{SheetName}}_Data __g_{{SheetName}}_Data;
const {{SheetName}}_Data& Get{{SheetName}}();
// 加载函数
void {{SheetName}}_LoadData(const std::string& pszDataFilePath);
void {{SheetName}}_SetColumn({{SheetName}}& rCfg, const std::string& name, const std::string& col);
